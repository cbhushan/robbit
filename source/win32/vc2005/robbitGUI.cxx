// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "robbitGUI.h"

void RobbitUI::cb_RobbitMainWindow_i(Fl_Double_Window*, void*) {
  display->setExit();
}
void RobbitUI::cb_RobbitMainWindow(Fl_Double_Window* o, void* v) {
  ((RobbitUI*)(o->user_data()))->cb_RobbitMainWindow_i(o,v);
}

void RobbitUI::cb_indexSlider_i(Fl_Value_Slider* o, void*) {
  display->setIndex((int)o->value());
}
void RobbitUI::cb_indexSlider(Fl_Value_Slider* o, void* v) {
  ((RobbitUI*)(o->parent()->user_data()))->cb_indexSlider_i(o,v);
}

void RobbitUI::cb_ButtonAbout_i(Fl_Button*, void*) {
  AboutWindow->show();
textrobbit->load("index.html");
}
void RobbitUI::cb_ButtonAbout(Fl_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ButtonAbout_i(o,v);
}

void RobbitUI::cb_ToggleAutoView_i(Fl_Light_Button* o, void*) {
  display->setAutoView(o->value());
if(o->value())
ToggleTopView->deactivate();
else
ToggleTopView->activate();
}
void RobbitUI::cb_ToggleAutoView(Fl_Light_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ToggleAutoView_i(o,v);
}

void RobbitUI::cb_ToggleTopView_i(Fl_Light_Button* o, void*) {
  display->setTopView(o->value());
if(o->value())
ToggleAutoView->deactivate();
else
ToggleAutoView->activate();
}
void RobbitUI::cb_ToggleTopView(Fl_Light_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ToggleTopView_i(o,v);
}

void RobbitUI::cb_ToggleTrails_i(Fl_Light_Button* o, void*) {
  display->setTrails(o->value());
}
void RobbitUI::cb_ToggleTrails(Fl_Light_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ToggleTrails_i(o,v);
}

void RobbitUI::cb_ToggleObstacles_i(Fl_Light_Button* o, void*) {
  display->setObstacles(o->value());
}
void RobbitUI::cb_ToggleObstacles(Fl_Light_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ToggleObstacles_i(o,v);
}

void RobbitUI::cb_ToggleBotNumbering_i(Fl_Light_Button* o, void*) {
  display->setBotNumbering(o->value());
}
void RobbitUI::cb_ToggleBotNumbering(Fl_Light_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ToggleBotNumbering_i(o,v);
}

void RobbitUI::cb_ButtonAdvSettings_i(Fl_Button*, void*) {
  display->initAdvWindow();
AdvSettingsWindow->show();
}
void RobbitUI::cb_ButtonAdvSettings(Fl_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ButtonAdvSettings_i(o,v);
}

void RobbitUI::cb_ButtonScrrenshot_i(Fl_Button*, void*) {
  display->CaptureScreenshot();
}
void RobbitUI::cb_ButtonScrrenshot(Fl_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ButtonScrrenshot_i(o,v);
}

void RobbitUI::cb_0_i(Fl_Menu_*, void*) {
  display->setRenderSpeed(0.5);
}
void RobbitUI::cb_0(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_0_i(o,v);
}

void RobbitUI::cb_1X_i(Fl_Menu_*, void*) {
  display->setRenderSpeed(1);
}
void RobbitUI::cb_1X(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_1X_i(o,v);
}

void RobbitUI::cb_2X_i(Fl_Menu_*, void*) {
  display->setRenderSpeed(2);
}
void RobbitUI::cb_2X(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_2X_i(o,v);
}

void RobbitUI::cb_5X_i(Fl_Menu_*, void*) {
  display->setRenderSpeed(5);
}
void RobbitUI::cb_5X(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_5X_i(o,v);
}

void RobbitUI::cb_10X_i(Fl_Menu_*, void*) {
  display->setRenderSpeed(10);
}
void RobbitUI::cb_10X(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_10X_i(o,v);
}

void RobbitUI::cb_MAX_i(Fl_Menu_*, void*) {
  display->setRenderSpeed(0);
}
void RobbitUI::cb_MAX(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_MAX_i(o,v);
}

Fl_Menu_Item RobbitUI::menu_RenderSpeedMenu[] = {
 {"0.5X", 0,  (Fl_Callback*)RobbitUI::cb_0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"1X", 0,  (Fl_Callback*)RobbitUI::cb_1X, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"2X", 0,  (Fl_Callback*)RobbitUI::cb_2X, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"5X", 0,  (Fl_Callback*)RobbitUI::cb_5X, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"10X", 0,  (Fl_Callback*)RobbitUI::cb_10X, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"MAX", 0,  (Fl_Callback*)RobbitUI::cb_MAX, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RobbitUI::cb_KheperaII_i(Fl_Menu_*, void*) {
  display->selectBot(1);
}
void RobbitUI::cb_KheperaII(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_KheperaII_i(o,v);
}

void RobbitUI::cb_KheperaIII_i(Fl_Menu_*, void*) {
  display->selectBot(2);
}
void RobbitUI::cb_KheperaIII(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_KheperaIII_i(o,v);
}

void RobbitUI::cb_Custom_i(Fl_Menu_*, void*) {
  custom_robot_window->show();
}
void RobbitUI::cb_Custom(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_Custom_i(o,v);
}

Fl_Menu_Item RobbitUI::menu_BotMenu[] = {
 {"Khepera II", 0,  (Fl_Callback*)RobbitUI::cb_KheperaII, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Khepera III", 0,  (Fl_Callback*)RobbitUI::cb_KheperaIII, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Custom", 0,  (Fl_Callback*)RobbitUI::cb_Custom, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* RobbitUI::KheperaII = RobbitUI::menu_BotMenu + 0;
Fl_Menu_Item* RobbitUI::KheperaIII = RobbitUI::menu_BotMenu + 1;
Fl_Menu_Item* RobbitUI::Custom = RobbitUI::menu_BotMenu + 2;

void RobbitUI::cb_Light1_i(Fl_Menu_*, void*) {
  display->setLights(1);
}
void RobbitUI::cb_Light1(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_Light1_i(o,v);
}

void RobbitUI::cb_Light2_i(Fl_Menu_*, void*) {
  display->setLights(2);
}
void RobbitUI::cb_Light2(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_Light2_i(o,v);
}

void RobbitUI::cb_Light3_i(Fl_Menu_*, void*) {
  display->setLights(3);
}
void RobbitUI::cb_Light3(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_Light3_i(o,v);
}

void RobbitUI::cb_Light4_i(Fl_Menu_*, void*) {
  display->setLights(4);
}
void RobbitUI::cb_Light4(Fl_Menu_* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_Light4_i(o,v);
}

Fl_Menu_Item RobbitUI::menu_LightMenu[] = {
 {"1", 0,  (Fl_Callback*)RobbitUI::cb_Light1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  (Fl_Callback*)RobbitUI::cb_Light2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  (Fl_Callback*)RobbitUI::cb_Light3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  (Fl_Callback*)RobbitUI::cb_Light4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* RobbitUI::Light1 = RobbitUI::menu_LightMenu + 0;
Fl_Menu_Item* RobbitUI::Light2 = RobbitUI::menu_LightMenu + 1;
Fl_Menu_Item* RobbitUI::Light3 = RobbitUI::menu_LightMenu + 2;
Fl_Menu_Item* RobbitUI::Light4 = RobbitUI::menu_LightMenu + 3;

void RobbitUI::cb_ButtonReset_i(Fl_Button*, void*) {
  display->setReset();
}
void RobbitUI::cb_ButtonReset(Fl_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ButtonReset_i(o,v);
}

void RobbitUI::cb_ButtonPlayPause_i(Fl_Button*, void*) {
  display->setPlayPause();
}
void RobbitUI::cb_ButtonPlayPause(Fl_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ButtonPlayPause_i(o,v);
}

void RobbitUI::cb_ButtonStop_i(Fl_Button*, void*) {
  display->setStop();
}
void RobbitUI::cb_ButtonStop(Fl_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ButtonStop_i(o,v);
}

void RobbitUI::cb_About_i(Fl_Button*, void*) {
  extern clock_t start_time;
SplashWindow->hide();
start_time=clock()-3*CLOCKS_PER_SEC;
AboutWindow->show();
textrobbit->load("index.html");
}
void RobbitUI::cb_About(Fl_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void RobbitUI::cb_Close_i(Fl_Return_Button*, void*) {
  extern clock_t start_time;
SplashWindow->hide();
start_time=clock()-3*CLOCKS_PER_SEC;
}
void RobbitUI::cb_Close(Fl_Return_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void RobbitUI::cb_OK_i(Fl_Return_Button*, void*) {
  display->setCustomRobot(atof(height->value()),atof(radius->value()
));
custom_robot_window->hide();
}
void RobbitUI::cb_OK(Fl_Return_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void RobbitUI::cb_maxy_i(Fl_Input*, void*) {
  display->setArena(atof(maxx->value()),atof(minx->value()),atof(maxy->value()),atof(miny->value()));
}
void RobbitUI::cb_maxy(Fl_Input* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_maxy_i(o,v);
}

void RobbitUI::cb_miny_i(Fl_Input*, void*) {
  display->setArena(atof(maxx->value()),atof(minx->value()),atof(maxy->value()),atof(miny->value()));
}
void RobbitUI::cb_miny(Fl_Input* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_miny_i(o,v);
}

void RobbitUI::cb_maxx_i(Fl_Input*, void*) {
  display->setArena(atof(maxx->value()),atof(minx->value()),atof(maxy->value()),atof(miny->value()));
}
void RobbitUI::cb_maxx(Fl_Input* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_maxx_i(o,v);
}

void RobbitUI::cb_minx_i(Fl_Input*, void*) {
  display->setArena(atof(maxx->value()),atof(minx->value()),atof(maxy->value()),atof(miny->value()));
}
void RobbitUI::cb_minx(Fl_Input* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_minx_i(o,v);
}

void RobbitUI::cb_ball_radius_i(Fl_Input* o, void*) {
  display->setBallRadius(atof(o->value()));
}
void RobbitUI::cb_ball_radius(Fl_Input* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_ball_radius_i(o,v);
}

void RobbitUI::cb_trail_points_i(Fl_Input* o, void*) {
  display->setTrailPoints(atoi(o->value()));
}
void RobbitUI::cb_trail_points(Fl_Input* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_trail_points_i(o,v);
}

void RobbitUI::cb_coloured_steps_i(Fl_Input* o, void*) {
  display->setColouredSteps(atoi(o->value()));
}
void RobbitUI::cb_coloured_steps(Fl_Input* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_coloured_steps_i(o,v);
}

void RobbitUI::cb_graphics_quality_i(Fl_Slider* o, void*) {
  display->setGraphicsQuality((int)(o->value()*10),(int)(o->value()*4));
}
void RobbitUI::cb_graphics_quality(Fl_Slider* o, void* v) {
  ((RobbitUI*)(o->parent()->parent()->parent()->user_data()))->cb_graphics_quality_i(o,v);
}

void RobbitUI::cb_OK1_i(Fl_Return_Button*, void*) {
  AdvSettingsWindow->hide();
}
void RobbitUI::cb_OK1(Fl_Return_Button* o, void* v) {
  ((RobbitUI*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

RobbitUI::RobbitUI() {
  { RobbitMainWindow = new Fl_Double_Window(950, 600, "Robbit v 4.0.0");
    RobbitMainWindow->box(FL_THIN_UP_BOX);
    RobbitMainWindow->color(FL_BACKGROUND2_COLOR);
    RobbitMainWindow->labelfont(4);
    RobbitMainWindow->callback((Fl_Callback*)cb_RobbitMainWindow, (void*)(this));
    { indexSlider = new Fl_Value_Slider(0, 570, 800, 30);
      indexSlider->type(5);
      indexSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
      indexSlider->color(FL_DARK2);
      indexSlider->maximum(100);
      indexSlider->step(1);
      indexSlider->callback((Fl_Callback*)cb_indexSlider);
      indexSlider->deactivate();
    } // Fl_Value_Slider* indexSlider
    { display = new Frame_Display(0, 0, 800, 570);
      display->box(FL_NO_BOX);
      display->color(FL_BACKGROUND_COLOR);
      display->selection_color(FL_BACKGROUND_COLOR);
      display->labeltype(FL_NORMAL_LABEL);
      display->labelfont(0);
      display->labelsize(14);
      display->labelcolor(FL_FOREGROUND_COLOR);
      display->align(FL_ALIGN_CENTER);
      display->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(display);
    } // Frame_Display* display
    { Fl_Group* o = new Fl_Group(800, 0, 150, 600);
      o->box(FL_THIN_DOWN_BOX);
      { Fl_Group* o = new Fl_Group(800, 0, 150, 10);
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(800, 10, 150, 590);
        o->color((Fl_Color)26);
        { ButtonAbout = new Fl_Button(808, 15, 134, 30, "&About");
          ButtonAbout->box(FL_PLASTIC_UP_BOX);
          ButtonAbout->down_box(FL_PLASTIC_DOWN_BOX);
          ButtonAbout->color(FL_BACKGROUND2_COLOR);
          ButtonAbout->selection_color((Fl_Color)1);
          ButtonAbout->callback((Fl_Callback*)cb_ButtonAbout);
        } // Fl_Button* ButtonAbout
        { ToggleAutoView = new Fl_Light_Button(808, 61, 134, 30, "A&uto view");
          ToggleAutoView->box(FL_PLASTIC_UP_BOX);
          ToggleAutoView->down_box(FL_PLASTIC_DOWN_BOX);
          ToggleAutoView->color(FL_BACKGROUND2_COLOR);
          ToggleAutoView->selection_color(FL_RED);
          ToggleAutoView->callback((Fl_Callback*)cb_ToggleAutoView);
        } // Fl_Light_Button* ToggleAutoView
        { ToggleTopView = new Fl_Light_Button(808, 107, 134, 30, "&Top view");
          ToggleTopView->box(FL_PLASTIC_UP_BOX);
          ToggleTopView->down_box(FL_PLASTIC_DOWN_BOX);
          ToggleTopView->color(FL_BACKGROUND2_COLOR);
          ToggleTopView->selection_color(FL_RED);
          ToggleTopView->callback((Fl_Callback*)cb_ToggleTopView);
        } // Fl_Light_Button* ToggleTopView
        { ToggleTrails = new Fl_Light_Button(808, 154, 134, 30, "Trai&ls");
          ToggleTrails->box(FL_PLASTIC_UP_BOX);
          ToggleTrails->down_box(FL_PLASTIC_DOWN_BOX);
          ToggleTrails->color(FL_BACKGROUND2_COLOR);
          ToggleTrails->selection_color(FL_RED);
          ToggleTrails->callback((Fl_Callback*)cb_ToggleTrails);
        } // Fl_Light_Button* ToggleTrails
        { ToggleObstacles = new Fl_Light_Button(808, 200, 134, 30, "&Obstacles");
          ToggleObstacles->box(FL_PLASTIC_UP_BOX);
          ToggleObstacles->down_box(FL_PLASTIC_DOWN_BOX);
          ToggleObstacles->color(FL_BACKGROUND2_COLOR);
          ToggleObstacles->selection_color(FL_RED);
          ToggleObstacles->callback((Fl_Callback*)cb_ToggleObstacles);
        } // Fl_Light_Button* ToggleObstacles
        { ToggleBotNumbering = new Fl_Light_Button(808, 247, 134, 30, "Bot &numbering");
          ToggleBotNumbering->box(FL_PLASTIC_UP_BOX);
          ToggleBotNumbering->down_box(FL_PLASTIC_DOWN_BOX);
          ToggleBotNumbering->color(FL_BACKGROUND2_COLOR);
          ToggleBotNumbering->selection_color(FL_RED);
          ToggleBotNumbering->callback((Fl_Callback*)cb_ToggleBotNumbering);
        } // Fl_Light_Button* ToggleBotNumbering
        { ButtonAdvSettings = new Fl_Button(808, 293, 134, 30, "A&dv. Settings");
          ButtonAdvSettings->box(FL_PLASTIC_UP_BOX);
          ButtonAdvSettings->down_box(FL_PLASTIC_DOWN_BOX);
          ButtonAdvSettings->color(FL_BACKGROUND2_COLOR);
          ButtonAdvSettings->selection_color((Fl_Color)1);
          ButtonAdvSettings->callback((Fl_Callback*)cb_ButtonAdvSettings);
        } // Fl_Button* ButtonAdvSettings
        { ButtonScrrenshot = new Fl_Button(808, 340, 134, 30, "&Screenshot");
          ButtonScrrenshot->box(FL_PLASTIC_UP_BOX);
          ButtonScrrenshot->down_box(FL_PLASTIC_DOWN_BOX);
          ButtonScrrenshot->color(FL_BACKGROUND2_COLOR);
          ButtonScrrenshot->selection_color((Fl_Color)1);
          ButtonScrrenshot->callback((Fl_Callback*)cb_ButtonScrrenshot);
        } // Fl_Button* ButtonScrrenshot
        { RenderSpeedMenu = new Fl_Choice(866, 390, 65, 27, "Speed");
          RenderSpeedMenu->box(FL_SHADOW_BOX);
          RenderSpeedMenu->down_box(FL_FLAT_BOX);
          RenderSpeedMenu->menu(menu_RenderSpeedMenu);
        } // Fl_Choice* RenderSpeedMenu
        { BotMenu = new Fl_Choice(836, 434, 106, 27, "Bot");
          BotMenu->box(FL_SHADOW_BOX);
          BotMenu->down_box(FL_FLAT_BOX);
          BotMenu->menu(menu_BotMenu);
        } // Fl_Choice* BotMenu
        { LightMenu = new Fl_Choice(874, 478, 43, 27, "Lights");
          LightMenu->box(FL_SHADOW_BOX);
          LightMenu->down_box(FL_FLAT_BOX);
          LightMenu->menu(menu_LightMenu);
        } // Fl_Choice* LightMenu
        { ButtonReset = new Fl_Button(829, 518, 95, 32, "Reset All");
          ButtonReset->box(FL_PLASTIC_UP_BOX);
          ButtonReset->down_box(FL_PLASTIC_DOWN_BOX);
          ButtonReset->color(FL_BACKGROUND2_COLOR);
          ButtonReset->selection_color((Fl_Color)1);
          ButtonReset->labelfont(1);
          ButtonReset->callback((Fl_Callback*)cb_ButtonReset);
        } // Fl_Button* ButtonReset
        { ButtonPlayPause = new Fl_Button(829, 558, 40, 35, "@||");
          ButtonPlayPause->box(FL_PLASTIC_UP_BOX);
          ButtonPlayPause->down_box(FL_PLASTIC_DOWN_BOX);
          ButtonPlayPause->color(FL_BACKGROUND2_COLOR);
          ButtonPlayPause->selection_color((Fl_Color)1);
          ButtonPlayPause->labelfont(1);
          ButtonPlayPause->callback((Fl_Callback*)cb_ButtonPlayPause);
        } // Fl_Button* ButtonPlayPause
        { ButtonStop = new Fl_Button(884, 558, 40, 35, "@-2square");
          ButtonStop->box(FL_PLASTIC_UP_BOX);
          ButtonStop->down_box(FL_PLASTIC_DOWN_BOX);
          ButtonStop->color(FL_BACKGROUND2_COLOR);
          ButtonStop->selection_color((Fl_Color)1);
          ButtonStop->labelfont(1);
          ButtonStop->callback((Fl_Callback*)cb_ButtonStop);
        } // Fl_Button* ButtonStop
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    RobbitMainWindow->end();
  } // Fl_Double_Window* RobbitMainWindow
  { AboutWindow = new Fl_Double_Window(500, 355, "About");
    AboutWindow->user_data((void*)(this));
    { textrobbit = new Fl_Help_View(10, 10, 480, 335);
    } // Fl_Help_View* textrobbit
    AboutWindow->set_non_modal();
    AboutWindow->end();
  } // Fl_Double_Window* AboutWindow
  { SplashWindow = new Fl_Double_Window(350, 275);
    SplashWindow->user_data((void*)(this));
    SplashWindow->align(FL_ALIGN_CENTER);
    SplashWindow->hotspot(SplashWindow);
    { htmlSplash = new Fl_Help_View(5, 5, 340, 230);
      htmlSplash->deactivate();
    } // Fl_Help_View* htmlSplash
    { Fl_Button* o = new Fl_Button(18, 242, 75, 25, "About");
      o->callback((Fl_Callback*)cb_About);
    } // Fl_Button* o
    { Fl_Return_Button* o = new Fl_Return_Button(255, 242, 75, 25, "Close");
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Return_Button* o
    SplashWindow->set_non_modal();
    SplashWindow->end();
  } // Fl_Double_Window* SplashWindow
  { custom_robot_window = new Fl_Double_Window(195, 190, "Custom Robot");
    custom_robot_window->user_data((void*)(this));
    custom_robot_window->hotspot(custom_robot_window);
    { height = new Fl_Input(88, 25, 70, 24, "Height:");
    } // Fl_Input* height
    { radius = new Fl_Input(88, 59, 70, 24, "Radius:");
    } // Fl_Input* radius
    { Fl_Text_Display* o = new Fl_Text_Display(100, 120, 0, 0, "For Cylindrical Robot");
      o->deactivate();
    } // Fl_Text_Display* o
    { Fl_Return_Button* o = new Fl_Return_Button(120, 140, 52, 30, "OK");
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Return_Button* o
    custom_robot_window->set_non_modal();
    custom_robot_window->clear_border();
    custom_robot_window->end();
  } // Fl_Double_Window* custom_robot_window
  { AdvSettingsWindow = new Fl_Double_Window(450, 300, "Advanced Settings");
    AdvSettingsWindow->user_data((void*)(this));
    AdvSettingsWindow->hotspot(AdvSettingsWindow);
    { Fl_Tabs* o = new Fl_Tabs(10, 10, 430, 240);
      { Fl_Group* o = new Fl_Group(10, 40, 430, 210, "Arena");
        { maxy = new Fl_Input(196, 89, 60, 24, "Max Y");
          maxy->type(1);
          maxy->labeltype(FL_EMBOSSED_LABEL);
          maxy->callback((Fl_Callback*)cb_maxy);
          maxy->align(FL_ALIGN_TOP_LEFT);
          maxy->when(FL_WHEN_CHANGED);
        } // Fl_Input* maxy
        { miny = new Fl_Input(196, 176, 60, 24, "Min Y");
          miny->labeltype(FL_EMBOSSED_LABEL);
          miny->callback((Fl_Callback*)cb_miny);
          miny->align(FL_ALIGN_BOTTOM_LEFT);
          miny->when(FL_WHEN_CHANGED);
        } // Fl_Input* miny
        { maxx = new Fl_Input(278, 133, 60, 24, "Max X");
          maxx->labeltype(FL_EMBOSSED_LABEL);
          maxx->callback((Fl_Callback*)cb_maxx);
          maxx->align(FL_ALIGN_RIGHT);
          maxx->when(FL_WHEN_CHANGED);
        } // Fl_Input* maxx
        { minx = new Fl_Input(113, 133, 60, 24, "Min X");
          minx->type(1);
          minx->labeltype(FL_EMBOSSED_LABEL);
          minx->callback((Fl_Callback*)cb_minx);
          minx->when(FL_WHEN_CHANGED);
        } // Fl_Input* minx
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(10, 40, 430, 210, "Others");
        o->hide();
        { ball_radius = new Fl_Input(59, 53, 65, 24, "Radius of Ball");
          ball_radius->type(1);
          ball_radius->callback((Fl_Callback*)cb_ball_radius);
          ball_radius->align(FL_ALIGN_RIGHT);
        } // Fl_Input* ball_radius
        { trail_points = new Fl_Input(59, 93, 65, 24, "No of trail points");
          trail_points->type(2);
          trail_points->callback((Fl_Callback*)cb_trail_points);
          trail_points->align(FL_ALIGN_RIGHT);
        } // Fl_Input* trail_points
        { coloured_steps = new Fl_Input(59, 133, 65, 24, "No of Coloured Steps(for collision)");
          coloured_steps->type(2);
          coloured_steps->callback((Fl_Callback*)cb_coloured_steps);
          coloured_steps->align(136);
        } // Fl_Input* coloured_steps
        { graphics_quality = new Fl_Slider(59, 183, 325, 24, "Graphics Quality");
          graphics_quality->type(5);
          graphics_quality->minimum(1);
          graphics_quality->maximum(6);
          graphics_quality->step(0.1);
          graphics_quality->callback((Fl_Callback*)cb_graphics_quality);
          graphics_quality->align(FL_ALIGN_TOP_LEFT);
        } // Fl_Slider* graphics_quality
        { Fl_Output* o = new Fl_Output(56, 218, 0, 0, "Low");
          o->align(FL_ALIGN_RIGHT);
        } // Fl_Output* o
        { Fl_Output* o = new Fl_Output(352, 218, 0, 0, "High");
          o->align(136);
        } // Fl_Output* o
        { Fl_Output* o = new Fl_Output(262, 234, 0, 0, " (High CPU usage)");
          o->align(136);
        } // Fl_Output* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Return_Button* o = new Fl_Return_Button(360, 260, 80, 30, "OK");
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Return_Button* o
    AdvSettingsWindow->set_non_modal();
    AdvSettingsWindow->end();
  } // Fl_Double_Window* AdvSettingsWindow
}

void RobbitUI::show() {
  RobbitMainWindow->show();
}
